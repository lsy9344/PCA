---
description: 
globs: 
alwaysApply: true
---
# 5. 에러 처리, 로깅, 재시도 정책 (AWS CloudWatch Logs 비용 최적화)

## 1. 기본 원칙

-   **모든 단계 에러 처리**: Playwright의 모든 주요 동작(페이지 이동, 클릭, 입력 등)은 `try-except` 블록으로 감싸 예외를 처리한다.
-   **최소한의 로그 기록**: 에러 발생 시, **핵심 정보만 간결하게** 로그를 기록한다. CloudWatch Logs 비용 절감을 위해 불필요한 상세 정보는 제외한다.
    -   필수 정보: `[매장][단계] 에러코드` (예: `[A][로그인] FAIL_AUTH`, `[B][쿠폰조회] FAIL_PARSE`)
    -   상세 에러 메시지는 텔레그램 알림에만 포함하고, 로그에는 간단한 코드만 기록
-   **선별적 재시도**: 실패 시 무조건 재시도하는 대신, 네트워크 오류 등 일시적일 가능성이 있는 경우에만 1~2회 재시도를 고려한다.

## 2. AWS CloudWatch Logs 비용 최적화 전략

### 2.1 로그 레벨 최적화
-   **프로덕션 환경**: `WARNING` 레벨 이상만 기록 (`logger.setLevel(logging.WARNING)`)
-   **개발/테스트 환경**: `INFO` 레벨까지 허용
-   **디버깅 필요시**: 환경변수로 `DEBUG` 레벨 활성화 가능

### 2.2 로그 보존 기간 설정
-   **에러 로그**: 30일 보존 (문제 해결 및 패턴 분석용)
-   **일반 실행 로그**: 7일 보존 (최근 실행 상태 확인용)
-   **디버그 로그**: 1일 보존 (즉시 문제 해결용)

### 2.3 로그 메시지 간소화
-   **긴 에러 메시지 축약**: 핵심 키워드만 포함
-   **반복 정보 제거**: 매번 동일한 정보는 생략
-   **구조화된 로깅**: JSON 형식 사용 시 필드명 최소화

## 3. 실패 단계별 처리 방안 (비용 최적화)

| 단계                 | 실패 시 로그 기록                                                                                                                                                               | 텔레그램 알림 | 재시도 정책 |
| -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------- | ----------- |
| **로그인**           | `[매장][로그인] FAIL_AUTH` (상세 내용은 텔레그램만)                                                                                                                             | ✅            | 1회 재시도  |
| **차량 검색**        | "검색된 차량 없음"은 `[매장][차량검색] NO_VEHICLE`로 기록.<br>그 외 에러는 `[매장][차량검색] FAIL_SEARCH`                                                                       | ✅ (에러시만) | 없음        |
| **쿠폰 이력 조회**   | `[매장][쿠폰조회] FAIL_PARSE` (어떤 셀렉터 실패했는지는 텔레그램만)                                                                                                             | ✅            | 없음        |
| **쿠폰 적용**        | `[매장][쿠폰적용] FAIL_APPLY` (상세 내용은 텔레그램만)                                                                                                                          | ✅            | 없음        |
| **팝업 처리 등 부가 기능** | 로그 기록 없음 (텔레그램 알림도 없음)                                                                                                                                           | ❌            | 없음        |

## 4. 텔레그램 알림 정책 (로그 대체 수단)

-   **실패 시 즉시 알림**: **프로세스가 중단되는 모든 종류의 에러**가 발생했을 때 텔레그램으로 상세 정보 전송
-   **텔레그램에만 상세 정보 포함**: CloudWatch Logs 비용 절감을 위해 상세 에러 메시지는 텔레그램에만 기록
-   **필수 정보 포함**:
    -   **실패 원인**: 발생한 에러의 상세 메시지 (로그에는 간단한 코드만)
    -   **실패 매장**: 어느 매장에서 실패했는지
    -   **실패 차량번호**: 어떤 차량 작업 중이었는지
    -   **실패 시간**: 에러 발생 시각

### 텔레그램 메시지 예시 (상세 정보)

```
🚨 쿠폰 자동화 실패 🚨

매장: B
차량: 12가3456
단계: 쿠폰조회
시간: 2023/10/27 15:30:10
원인: 'ul.discount-list' 요소를 찾을 수 없습니다.
```

### CloudWatch 로그 예시 (간소화)

```
[B][쿠폰조회] FAIL_PARSE
```

## 5. 로그 관리 (비용 최적화)

### 5.1 로그 레벨별 정책
-   **ERROR**: 프로세스 중단 에러만 (필수)
-   **WARNING**: 프로세스 계속되지만 주의 필요한 경우 (선택적)
-   **INFO**: 프로덕션에서는 비활성화, 개발시에만 사용
-   **DEBUG**: 로컬 개발시에만 사용

### 5.2 환경별 로그 설정
```python
# 프로덕션 환경
if os.getenv('ENVIRONMENT') == 'production':
    logger.setLevel(logging.WARNING)
    # CloudWatch 보존 기간: 7일
else:
    logger.setLevel(logging.INFO)
    # CloudWatch 보존 기간: 1일
```

### 5.3 로그 메시지 최적화 규칙
-   **에러 코드 사용**: 긴 메시지 대신 간단한 코드 (예: `FAIL_AUTH`, `NO_VEHICLE`)
-   **스택 트레이스 제외**: 프로덕션에서는 스택 트레이스를 CloudWatch에 기록하지 않음
-   **반복 정보 생략**: 매장명, 시간 등은 한 번만 기록

## 6. 비용 모니터링 및 알림

### 6.1 CloudWatch Logs 사용량 모니터링
-   월별 로그 데이터 수집량 추적
-   예상 비용 초과 시 알림 설정
-   로그 그룹별 사용량 분석

### 6.2 비용 절감 체크리스트
- [ ] 프로덕션 환경에서 로그 레벨 `WARNING` 이상으로 설정
- [ ] CloudWatch Logs 보존 기간 설정 (7-30일)
- [ ] 불필요한 `INFO` 로그 제거
- [ ] 에러 메시지 간소화 (코드 사용)
- [ ] 텔레그램 알림으로 상세 정보 대체
- [ ] 월별 CloudWatch Logs 비용 모니터링

---
이 문서는 AWS CloudWatch Logs 비용을 최소화하면서도 시스템의 안정성과 모니터링 기능을 유지하기 위한 최적화된 로깅 전략을 제시한다.